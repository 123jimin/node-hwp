# HWP 레코드
tag BEGIN 16;
tago BEGIN 0 DOCUMENT_PROPERTIES;
tago BEGIN 1 ID_MAPPINGS;
tago BEGIN 2 BIN_DATA;
tago BEGIN 3 FACE_NAME;
tago BEGIN 4 BORDER_FILL;
tago BEGIN 5 CHAR_SHAPE;
tago BEGIN 6 TAB_DEF;
tago BEGIN 7 NUMBERING;
tago BEGIN 8 BULLET;
tago BEGIN 9 PARA_SHAPE;
tago BEGIN 10 STYLE;
tago BEGIN 11 DOC_DATA;
tago BEGIN 12 DISTRIBUTE_DOC_DATA;
# 13: Reserved
tago BEGIN 14 COMPATIBLE_DOCUMENT;
tago BEGIN 15 LAYOUT_COMPATIBILITY;
tago BEGIN 78 FORBIDDEN_CHAR;

# 4.1.1. 문서 속성
record DOCUMENT_PROPERTIES {
	UInt16 SecCnt;
	Group BeginNumber {
		UInt16 Page;
		UInt16 Footnote;
		UInt16 Endnote;
		UInt16 Picture;
		UInt16 Table;
		UInt16 Equation;
	}
	Group CaretPos {
		UInt32 List;
		UInt32 Para;
		UInt32 Pos;
	}
}

# 4.1.2. 아이피 매핑 헤더
record ID_MAPPINGS {
	Int32 BinDataCount;
	Array:7 FontCount
		Int32 value;
	Int32 BorderFillCount;
	Int32 CharShapeCount;
	Int32 TabDefCount;
	Int32 NumberingCount;
	Int32 BulletCount;
	Int32 ParaShapeCount;
	Int32 StyleCount;
	Int32 MemoCount;
}

# 4.1.3. 바이너리 데이터 (TODO: 문서 설명이 정확하지 않은 듯 함)
record BIN_DATA {
	UInt16 Property;
}

# 4.1.4. 글꼴 (TODO: 직접 데이터 처리해야 됨)
record FACE_NAME {
	Bits:1 {
		# 문서에 없음
		0~1 enum FontType: Int Type;
		5 Boolean HasDefault;
		6 Boolean HasShape;
		7 Boolean HasSubst;
	}
	WString Name;
	{{ if(this.attr.HasSubst){ }}
	Group SubstFont {
		Bits:1 {
			0~1 enum FontType: Int Type;
		}
		WString Name;
	}
	{{ } }}
	{{ if(this.attr.HasShape){ }}
	Group TypeInfo {
		Byte FamilyType;
		Byte SerifStyle;
		Byte Weight;
		Byte Proportion;
		Byte Contrast;
		Byte StrokeVariation;
		Byte ArmStyle;
		Byte Letterform;
		Byte Midline;
		Byte XHeight;
	}
	{{ } }}
	{{ if(this.attr.HasDefault){ }}
	# TODO_SOMETIME: 이 곳 채워넣기
	{{ } }}
}

# 4.1.5 테두리 / 배경
record BORDER_FILL {
	Bits:2 {
		0 Boolean ThreeD;
		1 Boolean Shadow;
		# TODO: Slash / BackSlash
	}

	# 문서와 다르게 이렇게 저장됨.
	Group LeftBorder {
		enum LineType1: UInt8 Type;
		enum LineWidth: UInt8 Width;
		ColorRef Color;
	}
	Group RightBorder {
		enum LineType1: UInt8 Type;
		enum LineWidth: UInt8 Width;
		ColorRef Color;
	}
	Group TopBorder {
		enum LineType1: UInt8 Type;
		enum LineWidth: UInt8 Width;
		ColorRef Color;
	}
	Group BottomBorder {
		enum LineType1: UInt8 Type;
		enum LineWidth: UInt8 Width;
		ColorRef Color;
	}
	Group Diagonal {
		enum LineType1: UInt8 Type;
		enum LineWidth: UInt8 Width;
		ColorRef Color;
	}

	# TODO: 이것들이 의미하는 것 찾기.
	UInt32 _type;
	DWord _size;
	{{ if(this.attr._type){ /* WindowBrush가 없는 것도 있음. */ }}
	Group WindowBrush {
		ColorRef FaceColor;
		ColorRef HatchColor;
		enum HatchStyle: Int32 HatchStyle;
	}
	{{ } }}
	# TODO: Gradation
}

# 4.1.6. 글자 모양
record CHAR_SHAPE{
	Array:7 FontIDs
		Word value;
	Array:7 FontRatios
		UInt8 value;
	Array:7 FontCharSpacings
		Int8 value;
	Array:7 FontRelSizes
		UInt8 value;
	Array:7 FontCharOffsets
		Int8 value;
	Int32 Height;

	Group Shadow;
	Bits:4 {
		0 Boolean Italic;
		1 Boolean Bold;
		# TODO: 밑줄 종류 및 모양
		8~10 enum LineType3: Int OutlineType;
		11~12 enum ShadowType: Int Shadow:Type;
		13 Boolean Emboss;
		14 Boolean Engrave;
		15 Boolean SuperScript;
		16 Boolean SubScript;
		# TODO: 취소선 종류 및 모양
		# 숫자임.
		21~24 Int SymMark;
		25 Boolean UseFontSpace;
		30 Boolean UseKerning;
	}
	Int8 Shadow:OffsetX;
	Int8 Shadow:OffsetY;
	ColorRef TextColor;
	ColorRef UnderlineColor;
	ColorRef ShadeColor;
	ColorRef Shadow:Color;
	UInt16 BorderFillId;
	ColorRef StrikeColor;

	# TODO: 밑줄
	# TODO: 취소선
}

# 4.1.7 탭 정의
record TAB_DEF {
	# TODO
}

# 4.1.8 문단 번호
record NUMBERING {
	# TODO
}

# 4.1.9 글머리표
record BULLET {
	# TODO
}

# 4.1.10 문단 모양
record PARA_SHAPE {
	Group ParaMargin;
	Group ParaBorder;
	Bits:4 {
		# LineSpacingType이 2개 있음. (2007 이하, 초과)
		0~1 enum LineSpacingType: Int ParaMargin:LineSpacingType;
		2~4 enum AlignType1: Int Align;
		5~6 enum BreakLatinWordType: Int BreakLatinWord;
		# HML에서 true / false로 구분
		7 Boolean BreakNonLatinWord;
		8 Boolean SnapToGrid;
		9~15 Int Condense;
		16 Boolean WidowOrphan;
		17 Boolean KeepWithNext;
		18 Boolean KeepLines;
		19 Boolean PageBreakBefore;
		20~21 enum VerAlignType: Int VerAlign;
		22 Boolean FontLineHeight;
		23~24 enum HeadingType: Int HeadingType;
		25~27 Int Level;
		28 Boolean ParaBorder:Connect;
		29 Boolean ParaBorder:IgnoreMargin;
		# TODO: 문단 꼬리 모양
	}
	Int32 ParaMargin:Left;
	Int32 ParaMargin:Right;
	# TODO: 간격 종류는 어디에서?
	Int32 ParaMargin:Indent;
	Int32 ParaMargin:Prev;
	Int32 ParaMargin:Next;
	# 2007 이하
	Int32 ParaMargin:LineSpacing;

	UInt16 TabDef;
	UInt16 Heading;

	UInt16 ParaBorder:BorderFill;
	Int16 ParaBorder:OffsetLeft;
	Int16 ParaBorder:OffsetRight;
	Int16 ParaBorder:OffsetTop;
	Int16 ParaBorder:OffsetBottom;

	Bits:4 {
		0~1 enum LineWrapType: Int LineWrap;
		# 2~3: Reserved
		4 Boolean AutoSpaceEAsianEng;
		5 Boolean AutoSpaceEAsianNum;
	}

	# TODO_SOMETIME: 2007 이하에서 이게 없을까?
	Bits:4 {
		0~4 enum LineSpacingType: Int ParaMargin:LineSpacingType;
	}
	UInt32 ParaMargin:LineSpacing;
}

# 4.1.11 스타일
record STYLE {
	WString Name;
	WString EngName;
	Bits:1 {
		0~2 enum StyleType: Int Type;
	}
	Byte NextStyle;
	Int16 LangId;
	UInt16 ParaShape;
	UInt16 CharShape;
}

# 4.1.12 문서 임의의 데이터
record DOC_DATA {}

# 4.1.13 배포용 문서 데이터 (TODO: 이 데이터의 의미 찾기)
record DISTRIBUTE_DOC_DATA {
	ByteStream:256 Data;
}

# 4.1.14 호환 문서 (TODO: enum)
record COMPATIBLE_DOCUMENT {
	UInt32 TargetProgram;
}

# 4.1.15 레이아웃 호환성 (TODO: 각각의 필드가 뜻하는 것 찾기)
record LAYOUT_COMPATIBILITY {
	UInt32 _Char;
	UInt32 _Para;
	UInt32 _Sec;
	UInt32 _Obj;
	UInt32 _Field;
}

# ??? 금칙 문자 (TODO: 어떻게 저장되는지 찾기)
record FORBIDDEN_CHAR;
