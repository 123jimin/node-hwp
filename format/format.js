/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var format = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"type_node":3,"String":4,"Int":5,"Boolean":6,"type_record":7,"Byte":8,"Word":9,"DWord":10,"WChar":11,"WString":12,"HWPUnit":13,"SHWPUnit":14,"UInt8":15,"UInt16":16,"UInt32":17,"Int8":18,"Int16":19,"Int32":20,"ColorRef":21,"type_record_array_type":22,"Array":23,":":24,"TOKEN":25,"INTEGER":26,"type_record_bytestream_type":27,"ByteStream":28,"entry_point":29,"format":30,"element":31,"EOF":32,"def_enum":33,"def_node":34,"def_tag":35,"def_tago":36,"def_record":37,"COMMENT":38,"ROOT":39,"ENUM":40,"NODE":41,"def_node_inner":42,"def_node_element":43,"TAB":44,"def_node_element_options":45,"def_node_element_option":46,"=":47,"QUOTED_STRING":48,"TAG":49,"TAG_OFFSET":50,"RECORD":51,"def_record_inner":52,"def_record_element":53,"def_record_simpletype":54,"def_record_group":55,"def_record_array":56,"def_record_bytestream":57,"SCRIPT":58,"Group":59,"def_record_group_inner":60,"def_record_group_element":61,"TWO_TABS":62,"type_record_byptestream_type":63,"$accept":0,"$end":1},
terminals_: {2:"error",4:"String",5:"Int",6:"Boolean",8:"Byte",9:"Word",10:"DWord",11:"WChar",12:"WString",13:"HWPUnit",14:"SHWPUnit",15:"UInt8",16:"UInt16",17:"UInt32",18:"Int8",19:"Int16",20:"Int32",21:"ColorRef",23:"Array",24:":",25:"TOKEN",26:"INTEGER",28:"ByteStream",32:"EOF",38:"COMMENT",39:"ROOT",40:"ENUM",41:"NODE",44:"TAB",47:"=",48:"QUOTED_STRING",49:"TAG",50:"TAG_OFFSET",51:"RECORD",58:"SCRIPT",59:"Group",62:"TWO_TABS",63:"type_record_byptestream_type"},
productions_: [0,[3,1],[3,1],[3,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[22,3],[22,3],[27,3],[27,3],[29,1],[30,2],[30,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[33,2],[34,2],[34,3],[42,2],[42,1],[43,3],[43,4],[45,2],[45,1],[46,3],[46,3],[35,3],[36,4],[37,2],[37,3],[52,2],[52,1],[53,2],[53,2],[53,2],[53,2],[54,2],[54,1],[55,3],[60,2],[60,1],[61,2],[56,3],[57,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 18:this.$ = $$[$0];
break;
case 19:this.$ = +$$[$0];
break;
case 20:this.$ = $$[$0];
break;
case 21:this.$ = +$$[$0];
break;
case 22:return generateCode($$[$0]);
break;
case 23:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 24:this.$ = [];
break;
case 25:this.$ = $$[$0];
break;
case 26:this.$ = $$[$0];
break;
case 27:this.$ = $$[$0];
break;
case 28:this.$ = $$[$0];
break;
case 29:this.$ = $$[$0];
break;
case 30:this.$ = new node.Comment($$[$0]);
break;
case 31:this.$ = new node.Root($$[$0]);
break;
case 32:this.$ = null;
break;
case 33:this.$ = new node.Node($$[$0], []);
break;
case 34:this.$ = new node.Node($$[$0-1], $$[$0]);
break;
case 35:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 36:this.$ = [$$[$0]];
break;
case 37:this.$ = new node.NodeType($$[$0-1], $$[$0], []);
break;
case 38:this.$ = new node.NodeType($$[$0-2], $$[$0-1], $$[$0]);
break;
case 39:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 40:this.$ = [$$[$0]];
break;
case 41:this.$ = [$$[$0-2], $$[$0]];
break;
case 42:this.$ = [$$[$0-2], $$[$0].slice(1,-1)];
break;
case 43:this.$ = new node.Tag($$[$0-1], $$[$0]);
break;
case 44:this.$ = new node.TagOffset($$[$0], $$[$0-2], $$[$0-1]);
break;
case 45:this.$ = new node.Record($$[$0], []);
break;
case 46:this.$ = new node.Record($$[$0-1], $$[$0]);
break;
case 47:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 48:this.$ = [$$[$0]];
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = new node.SimpleType($$[$0-1], $$[$0]);
break;
case 54:this.$ = new node.Script($$[$0].slice(2,-2));
break;
case 55:this.$ = new node.Group($$[$0-1], $$[$0]);
break;
case 56:this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 57:this.$ = [$$[$0]];
break;
case 58:this.$ = $$[$0];
break;
case 59:this.$ = new node.Array($$[$0], $$[$0-2], $$[$0-1]);
break;
case 60:this.$ = new node.ByteStream($$[$0-1], $$[$0]);
break;
}
},
table: [{29:1,30:2,31:3,32:[1,4],33:5,34:6,35:7,36:8,37:9,38:[1,10],39:[1,11],40:[1,12],41:[1,13],49:[1,14],50:[1,15],51:[1,16]},{1:[3]},{1:[2,22]},{30:17,31:3,32:[1,4],33:5,34:6,35:7,36:8,37:9,38:[1,10],39:[1,11],40:[1,12],41:[1,13],49:[1,14],50:[1,15],51:[1,16]},{1:[2,24]},{32:[2,25],38:[2,25],39:[2,25],40:[2,25],41:[2,25],49:[2,25],50:[2,25],51:[2,25]},{32:[2,26],38:[2,26],39:[2,26],40:[2,26],41:[2,26],49:[2,26],50:[2,26],51:[2,26]},{32:[2,27],38:[2,27],39:[2,27],40:[2,27],41:[2,27],49:[2,27],50:[2,27],51:[2,27]},{32:[2,28],38:[2,28],39:[2,28],40:[2,28],41:[2,28],49:[2,28],50:[2,28],51:[2,28]},{32:[2,29],38:[2,29],39:[2,29],40:[2,29],41:[2,29],49:[2,29],50:[2,29],51:[2,29]},{32:[2,30],38:[2,30],39:[2,30],40:[2,30],41:[2,30],49:[2,30],50:[2,30],51:[2,30]},{25:[1,18]},{25:[1,19]},{25:[1,20]},{25:[1,21]},{25:[1,22]},{25:[1,23]},{1:[2,23]},{32:[2,31],38:[2,31],39:[2,31],40:[2,31],41:[2,31],49:[2,31],50:[2,31],51:[2,31]},{32:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],49:[2,32],50:[2,32],51:[2,32]},{32:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],42:24,43:25,44:[1,26],49:[2,33],50:[2,33],51:[2,33]},{26:[1,27]},{26:[1,28]},{32:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],44:[1,31],49:[2,45],50:[2,45],51:[2,45],52:29,53:30},{32:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],49:[2,34],50:[2,34],51:[2,34]},{32:[2,36],38:[2,36],39:[2,36],40:[2,36],41:[2,36],42:32,43:25,44:[1,26],49:[2,36],50:[2,36],51:[2,36]},{3:33,4:[1,34],5:[1,35],6:[1,36]},{32:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],49:[2,43],50:[2,43],51:[2,43]},{25:[1,37]},{32:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],49:[2,46],50:[2,46],51:[2,46]},{32:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],44:[1,31],49:[2,48],50:[2,48],51:[2,48],52:38,53:30},{7:43,8:[1,48],9:[1,49],10:[1,50],11:[1,51],12:[1,52],13:[1,53],14:[1,54],15:[1,55],16:[1,56],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:46,23:[1,62],54:39,55:40,56:41,57:42,58:[1,44],59:[1,45],63:[1,47]},{32:[2,35],38:[2,35],39:[2,35],40:[2,35],41:[2,35],49:[2,35],50:[2,35],51:[2,35]},{25:[1,63]},{25:[2,1]},{25:[2,2]},{25:[2,3]},{32:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],49:[2,44],50:[2,44],51:[2,44]},{32:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],49:[2,47],50:[2,47],51:[2,47]},{32:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],44:[2,49],49:[2,49],50:[2,49],51:[2,49]},{32:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],44:[2,50],49:[2,50],50:[2,50],51:[2,50]},{32:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],44:[2,51],49:[2,51],50:[2,51],51:[2,51]},{32:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],44:[2,52],49:[2,52],50:[2,52],51:[2,52]},{25:[1,64]},{32:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],44:[2,54],49:[2,54],50:[2,54],51:[2,54],62:[2,54]},{25:[1,65]},{25:[1,66]},{25:[1,67]},{25:[2,4]},{25:[2,5]},{25:[2,6]},{25:[2,7]},{25:[2,8]},{25:[2,9]},{25:[2,10]},{25:[2,11]},{25:[2,12]},{25:[2,13]},{25:[2,14]},{25:[2,15]},{25:[2,16]},{25:[2,17]},{24:[1,68]},{25:[1,71],32:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],44:[2,37],45:69,46:70,49:[2,37],50:[2,37],51:[2,37]},{32:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],44:[2,53],49:[2,53],50:[2,53],51:[2,53],62:[2,53]},{60:72,61:73,62:[1,74]},{60:75,61:73,62:[1,74]},{32:[2,60],38:[2,60],39:[2,60],40:[2,60],41:[2,60],44:[2,60],49:[2,60],50:[2,60],51:[2,60]},{25:[1,76],26:[1,77]},{32:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],44:[2,38],49:[2,38],50:[2,38],51:[2,38]},{25:[1,71],32:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],44:[2,40],45:78,46:70,49:[2,40],50:[2,40],51:[2,40]},{47:[1,79]},{32:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],44:[2,55],49:[2,55],50:[2,55],51:[2,55]},{32:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],44:[2,57],49:[2,57],50:[2,57],51:[2,57],60:80,61:73,62:[1,74]},{7:43,8:[1,48],9:[1,49],10:[1,50],11:[1,51],12:[1,52],13:[1,53],14:[1,54],15:[1,55],16:[1,56],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],54:81,58:[1,44]},{32:[2,59],38:[2,59],39:[2,59],40:[2,59],41:[2,59],44:[2,59],49:[2,59],50:[2,59],51:[2,59]},{25:[2,18]},{25:[2,19]},{32:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],44:[2,39],49:[2,39],50:[2,39],51:[2,39]},{25:[1,82],48:[1,83]},{32:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],44:[2,56],49:[2,56],50:[2,56],51:[2,56]},{32:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],44:[2,58],49:[2,58],50:[2,58],51:[2,58],62:[2,58]},{25:[2,41],32:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],44:[2,41],49:[2,41],50:[2,41],51:[2,41]},{25:[2,42],32:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],44:[2,42],49:[2,42],50:[2,42],51:[2,42]}],
defaultActions: {2:[2,22],4:[2,24],17:[2,23],34:[2,1],35:[2,2],36:[2,3],48:[2,4],49:[2,5],50:[2,6],51:[2,7],52:[2,8],53:[2,9],54:[2,10],55:[2,11],56:[2,12],57:[2,13],58:[2,14],59:[2,15],60:[2,16],61:[2,17],76:[2,18],77:[2,19]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	var node = {};
	
	node.Root = function Root(s){
		this.value = s;
	};
	node.Comment = function Comment(s){
		this.value = s.slice(2);
	};
	node.Tag = function Tag(s, v){
		this.name = s;
		this.value = +v;
	};
	node.TagOffset = function TagOffset(s, f, o){
		this.name = s;
		this.base = f;
		this.offset = +o;
	};
	node.Node = function Node(s, v){
		this.name = s;
		this.schema = v;
	};
	node.Record = function Record(s, v){
		this.name = s;
		this.schema = v;
	};
	node.Type = function Type(){
		this.name = null;
		this.type = null;
	};
	node.NodeType = function NodeType(t, s, o){
		this.name = s;
		this.type = t;
		this.options = {};
		o.forEach(function(a){
			this.options[a[0]] = a[1];
		}, this);
	};
	node.SimpleType = function SimpleType(t, s){
		this.name = s;
		this.type = t;
	};
	node.Group = function Group(s, a){
		this.name = s;
		this.values = a;
	};
	node.Array = function Array(t, l, s){
		this.name = s;
		this.length = l;
		this.type = t;
	};
	node.ByteStream = function ByteStream(l, s){
		this.name = s;
		this.length = l;
		this.type = 'ByteStream';
	};
	node.Script = function Script(s){
		this.script = s;
	};

	var simpleTypeCode = function(base, simple, offset){
		var code = "";
		switch(simple.type){
			case "Byte":
				code = base+"."+simple.name+" = this.data.readUInt8("+offset.value+");";
				code += offset.add(1);
				return code;
			case "Word":
				code = base+"."+simple.name+" = this.data.readUInt16LE("+offset.value+");";
				code += offset.add(2);
				return code;
			case "UInt8": case "Int8":
				code = base+"."+simple.name+" = this.data.read"+simple.type+"("+offset.value+");";
				code += offset.add(1);
				return code;
			case "UInt16": case "Int16":
				code = base+"."+simple.name+" = this.data.read"+simple.type+"LE("+offset.value+");";
				code += offset.add(2);
				return code;
			case "UInt32": case "Int32":
				code = base+"."+simple.name+" = this.data.read"+simple.type+"LE("+offset.value+");";
				code += offset.add(4);
				return code;
			case "WString":
				code = "tmp = this.data.readUInt16LE("+offset.value+");";
				code += offset.add(2) + offset.toObj();
				code += " for("+base+"."+simple.name+"='';tmp-->0;){"+base+"."+simple.name+"+=String.fromCharCode(this.data.readUInt16LE("+offset.value+"));"+offset.add(2)+"}";
				return code;
			case "ColorRef":
				code = base+"."+simple.name+" = this.data.readUInt32LE("+offset.value+");";
				code += offset.add(4);
				return code;
			default: return "// FIXME: unprocessed simple type: "+simple.type;
		}
	};

	var generateCode = function(format){
		var RT = "root", wc = "", tags = {}, tagInverse = [];
		format.forEach(function(o){
			if(o == null) return;
			if(o instanceof node.Root){
				rootObj = o.value;
			}
		});
		wc = RT+"={'record':{},'node':{},'tag':{},'enum':{}};\n"; RT += '.';
		wc += format.map(function(o){
			var code = "";
			if(o == null) return "// FIXME: null";
			if(o instanceof node.Comment){
				return "// " + o.value;
			}
			if(o instanceof node.Tag){
				tags[o.name] = o.value; tagInverse[o.value] = o.name;
				return RT+"tag."+o.name+" = "+o.value+";";
			}
			if(o instanceof node.TagOffset){
				tagInverse[tags[o.base] + o.offset] = o.name;
				return RT+"tag."+o.name+" = "+(tags[o.base] + o.offset)+";";
			}
			if(o instanceof node.Node){
				code += RT+"node."+o.name+" = function Node_"+o.name+"(){\n";
				code += "\tthis.name = \""+o.name+"\"; this.attr = {};\n";
				code += o.schema.map(function(nodeType){
					return "this.attr."+nodeType.name+" = "+(nodeType.options.default?"\""+nodeType.options.default+"\"":'null')+";";
				}).map(function(s){return '\t'+s+'\n';}).join('');
				code += "};";
				return code;
			}
			if(o instanceof node.Record){
				var offset = {'value': 0, 'add': function(v){
					if(typeof this.value == 'number'){
						this.value += v; return '';
					}
					var code = ' ';
					code += this.value+'+='+v+';';
					return code;
				}, 'toObj': function(){
					var code = "";
					if(typeof this.value == 'number'){
						code = "var offset={'value':"+this.value+"};";
						this.value = 'offset.value';
					}
					return code;
				}};
				code += RT+"record."+o.name+" = function Record_"+o.name+"(data){\n";
				code += "\tvar tmp; this.attr = {}; this.data = data;\n";
				code += o.schema.map(function(element){
					var c;
					if(element instanceof node.SimpleType){
						return simpleTypeCode("this.attr", element, offset);
					}
					if(element instanceof node.Group){
						c = "this.attr."+element.name+" = {};\n\t";
						c += element.values.map(function(e){
							return simpleTypeCode("this.attr."+element.name, e, offset);
						}).join('\n\t');
						return c;
					}
					if(element instanceof node.Array){
						c = "this.attr."+element.name+" = [];"+offset.toObj()+"\n";
						c += "\tfor(tmp=0;tmp<"+element.length+";tmp++){\n";
						c += "\t\tthis.attr."+element.name+"[tmp] = {};\n";
						c += "\t\t"+element.type.map(function(e){
							return simpleTypeCode("this.attr."+element.name+"[tmp]", e, offset);
						}).join('\n\t\t')+"\n";
						c += "\t}";
						return c;
					}
					if(element instanceof node.Script){
						c = offset.toObj()+' (function(){'+element.script.trim()+'\n\t}());';
						return c;
					}
					return "// FIXME: unprocessed type";
				}).map(function(s){return '\t'+s+'\n';}).join('');
				code += "};";
				return code;
			}
			return "// TODO: Process below object.\n/*\n"+o.toString()+"\n*/";
		}).join('\n')+'\n';
		wc += RT+"tag.table = "+JSON.stringify(tagInverse)+";";
		return wc;
	};

	parser.node = node;
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "SCRIPT";
break;
case 1:return "TWO_TABS";
break;
case 2:return "TAB";
break;
case 3:/* skip file comments */;
break;
case 4:return "COMMENT";
break;
case 5:/* skip whitespaces */
break;
case 6:return "QUOTED_STRING";
break;
case 7:return "String";
break;
case 8:return "Int";
break;
case 9:return "Boolean";
break;
case 10:return "Array";
break;
case 11:return "Byte";
break;
case 12:return "Word";
break;
case 13:return "DWord";
break;
case 14:return "WChar";
break;
case 15:return "WString";
break;
case 16:return "HWPUnit";
break;
case 17:return "SHWPUnit";
break;
case 18:return "UInt8";
break;
case 19:return "UInt16";
break;
case 20:return "UInt32";
break;
case 21:return "Int8";
break;
case 22:return "Int16";
break;
case 23:return "Int32";
break;
case 24:return "ColorRef";
break;
case 25:return "ByteStream";
break;
case 26:return "Bits";
break;
case 27:return "Group";
break;
case 28:return "RECORD";
break;
case 29:return "TYPE";
break;
case 30:return "ENUM";
break;
case 31:return "NODE";
break;
case 32:return "ROOT";
break;
case 33:return "TAG_OFFSET";
break;
case 34:return "TAG";
break;
case 35:return "=";
break;
case 36:return ":";
break;
case 37:return "~";
break;
case 38:return "INTEGER";
break;
case 39:return "TOKEN";
break;
case 40:return "EOF";
break;
}
},
rules: [/^(?:\{\{([^\}]|\}[^\}])+\}\})/,/^(?:\t\t)/,/^(?:\t)/,/^(?:## ([^\n]+))/,/^(?:# ([^\n]+))/,/^(?:( |\r|\n)+)/,/^(?:"([^\"]+)")/,/^(?:String\b)/,/^(?:Int\b)/,/^(?:Boolean\b)/,/^(?:Array\b)/,/^(?:Byte\b)/,/^(?:Word\b)/,/^(?:DWord\b)/,/^(?:WChar\b)/,/^(?:WString\b)/,/^(?:HWPUnit\b)/,/^(?:SHWPUnit\b)/,/^(?:UInt8\b)/,/^(?:UInt16\b)/,/^(?:UInt32\b)/,/^(?:Int8\b)/,/^(?:Int16\b)/,/^(?:Int32\b)/,/^(?:ColorRef\b)/,/^(?:ByteStream\b)/,/^(?:Bits\b)/,/^(?:Group\b)/,/^(?:record\b)/,/^(?:type\b)/,/^(?:enum\b)/,/^(?:node\b)/,/^(?:root\b)/,/^(?:tago\b)/,/^(?:tag\b)/,/^(?:=)/,/^(?::)/,/^(?:~)/,/^(?:[0-9]+)/,/^(?:[A-Za-z0-9_\-]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = format;
exports.Parser = format.Parser;
exports.parse = function () { return format.parse.apply(format, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}